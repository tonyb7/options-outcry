{
    "rules": {
        ".read": "auth != null",
        "users": {
            "$uid": {
                ".read": "auth != null",
                ".write": "auth != null",
                ".validate": "newData.hasChildren(['name'])",
                "name": {
                    ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 25"
                }
            }
        },
        "games": {
            "$gameId": {
                ".read": "auth != null",
                "startedAt": {
                    ".write": "auth != null && auth.uid == data.parent().child('host').val() && !data.exists() && newData.exists()",
                    ".validate": "newData.isNumber() && newData.val() == now"
                },
                "status": {
                    ".write": "auth != null && data.parent().child('users/' + auth.uid).exists() && data.exists() && newData.exists()",
                    ".validate": "newData.isString() && (data.val() == 'waiting' && newData.val() == 'ingame' && auth.uid == data.parent().child('host').val())"
                },
                "users": {
                    "$userId": {
                        ".write": "auth != null && auth.uid == $userId && data.parent().parent().child('status').val() == 'waiting'",
                        ".validate": "!newData.exists() || (newData.isNumber() && newData.val() == now)"
                    }
                }
            }
        },
        "gameData": {
            "$gameId": {
                ".read": "auth != null",
                ".write": "auth != null",
                "initialState": {
                    "lowestStrike": {
                        ".validate": "newData.isNumber() && newData.val() >= 20 && newData.val() <= 90"
                    },
                    "strikes": {},
                    "stockPrice": {
                        ".validate": "newData.isNumber() && newData.val() >= 20 && newData.val() <= 110"
                    },
                    "spread": {
                        ".validate": "newData.isNumber() && newData.val() >= 0.05 && newData.val() <= 0.25"
                    },
                    "riskFreeRate": {
                        ".validate": "newData.isNumber() && newData.val() >= 0.01 && newData.val() <= 0.03"
                    },
                    "tteDays": {
                        ".validate": "newData.isNumber() && newData.val() >= 25 && newData.val() <= 99"
                    },
                    "rc": {
                        ".validate": "newData.isNumber()"
                    },
                    "atmVol": {
                        ".validate": "newData.isNumber() && newData.val() >= 0.05 && newData.val() <= 0.40"
                    },
                    "skew": {
                        ".validate": "newData.isString() && (newData.val() == 'call' || newData.val() == 'put' || newData.val() == 'both')"
                    }
                },
                "initialStateOptionFairs": {
                    "calls": {},
                    "puts": {}
                },
                "structures": {
                    "putAndStock": {
                        "strike": {
                            ".validate": "newData.isNumber()"
                        },
                        "price": {
                            ".validate": "newData.isNumber()"
                        }
                    },
                    "buyWrite": {
                        "strike": {
                            ".validate": "newData.isNumber()"
                        },
                        "price": {
                            ".validate": "newData.isNumber()"
                        }
                    },
                    "straddle": {
                        "strike": {
                            ".validate": "newData.isNumber()"
                        },
                        "price": {
                            ".validate": "newData.isNumber()"
                        }
                    },
                    "callVertical": {
                        "lowerStrike": {
                            ".validate": "newData.isNumber()"
                        },
                        "verticalWidth": {
                            ".validate": "newData.isNumber()"
                        },
                        "price": {
                            ".validate": "newData.isNumber()"
                        }
                    },
                    "putVertical": {
                        "lowerStrike": {
                            ".validate": "newData.isNumber()"
                        },
                        "verticalWidth": {
                            ".validate": "newData.isNumber()"
                        },
                        "price": {
                            ".validate": "newData.isNumber()"
                        }
                    }
                },
                "optionFairs": {
                    "calls": {},
                    "puts": {}
                },
                "markets": {
                    "$user": {
                        "callBids": {},
                        "callAsks": {},
                        "callMarketTimes": {},
                        "putBids": {},
                        "putAsks": {},
                        "putMarketTimes": {}
                    }
                },
                "events": {
                    "$eventId": {
                        ".write": "!data.exists() && newData.exists() && auth != null && root.child('games/' + $gameId + '/users/' + auth.uid).exists()",
                        ".validate": "newData.hasChildren(['user', 'time'])",
                        "user": {
                            ".validate": "newData.isString() && newData.val() == auth.uid"
                        },
                        "time": {
                            ".validate": "newData.isNumber() && newData.val() == now"
                        }
                    }
                }
            }
        },
        "chats": {
            "$gameId": {
                ".read": "auth != null",
                ".indexOn": ["time", "user"],
                "$messageId": {
                    ".write": "auth != null && ((!data.exists() && newData.exists()) || (data.exists() && root.child('users').child(auth.uid).child('admin').val() == true))",
                    ".validate": "newData.hasChildren(['user', 'message', 'time'])",
                    "user": {
                        ".validate": "newData.isString()"
                    },
                    "message": {
                        ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 250"
                    },
                    "time": {
                        ".validate": "newData.isNumber() && newData.val() == now"
                    },
                    "$other": {
                        ".validate": false
                    }
                }
            }
        }
    }
}